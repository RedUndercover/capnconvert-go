// Code generated by capnpc-go. DO NOT EDIT.

package contract_impl

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	math "math"
)

type SimpleStruct capnp.Struct

// SimpleStruct_TypeID is the unique identifier for the type SimpleStruct.
const SimpleStruct_TypeID = 0x9272f8ed53f6839a

func NewSimpleStruct(s *capnp.Segment) (SimpleStruct, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SimpleStruct(st), err
}

func NewRootSimpleStruct(s *capnp.Segment) (SimpleStruct, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SimpleStruct(st), err
}

func ReadRootSimpleStruct(msg *capnp.Message) (SimpleStruct, error) {
	root, err := msg.Root()
	return SimpleStruct(root.Struct()), err
}

func (s SimpleStruct) String() string {
	str, _ := text.Marshal(0x9272f8ed53f6839a, capnp.Struct(s))
	return str
}

func (s SimpleStruct) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimpleStruct) DecodeFromPtr(p capnp.Ptr) SimpleStruct {
	return SimpleStruct(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimpleStruct) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimpleStruct) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimpleStruct) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimpleStruct) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimpleStruct) Id() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s SimpleStruct) SetId(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s SimpleStruct) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SimpleStruct) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SimpleStruct) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SimpleStruct) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// SimpleStruct_List is a list of SimpleStruct.
type SimpleStruct_List = capnp.StructList[SimpleStruct]

// NewSimpleStruct creates a new list of SimpleStruct.
func NewSimpleStruct_List(s *capnp.Segment, sz int32) (SimpleStruct_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SimpleStruct](l), err
}

// SimpleStruct_Future is a wrapper for a SimpleStruct promised by a client call.
type SimpleStruct_Future struct{ *capnp.Future }

func (f SimpleStruct_Future) Struct() (SimpleStruct, error) {
	p, err := f.Future.Ptr()
	return SimpleStruct(p.Struct()), err
}

type NestedStruct capnp.Struct

// NestedStruct_TypeID is the unique identifier for the type NestedStruct.
const NestedStruct_TypeID = 0xd7c0377bc29a0974

func NewNestedStruct(s *capnp.Segment) (NestedStruct, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NestedStruct(st), err
}

func NewRootNestedStruct(s *capnp.Segment) (NestedStruct, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return NestedStruct(st), err
}

func ReadRootNestedStruct(msg *capnp.Message) (NestedStruct, error) {
	root, err := msg.Root()
	return NestedStruct(root.Struct()), err
}

func (s NestedStruct) String() string {
	str, _ := text.Marshal(0xd7c0377bc29a0974, capnp.Struct(s))
	return str
}

func (s NestedStruct) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NestedStruct) DecodeFromPtr(p capnp.Ptr) NestedStruct {
	return NestedStruct(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NestedStruct) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NestedStruct) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NestedStruct) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NestedStruct) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NestedStruct) Simple() (SimpleStruct, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SimpleStruct(p.Struct()), err
}

func (s NestedStruct) HasSimple() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s NestedStruct) SetSimple(v SimpleStruct) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSimple sets the simple field to a newly
// allocated SimpleStruct struct, preferring placement in s's segment.
func (s NestedStruct) NewSimple() (SimpleStruct, error) {
	ss, err := NewSimpleStruct(capnp.Struct(s).Segment())
	if err != nil {
		return SimpleStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s NestedStruct) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NestedStruct) SetValue(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// NestedStruct_List is a list of NestedStruct.
type NestedStruct_List = capnp.StructList[NestedStruct]

// NewNestedStruct creates a new list of NestedStruct.
func NewNestedStruct_List(s *capnp.Segment, sz int32) (NestedStruct_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[NestedStruct](l), err
}

// NestedStruct_Future is a wrapper for a NestedStruct promised by a client call.
type NestedStruct_Future struct{ *capnp.Future }

func (f NestedStruct_Future) Struct() (NestedStruct, error) {
	p, err := f.Future.Ptr()
	return NestedStruct(p.Struct()), err
}
func (p NestedStruct_Future) Simple() SimpleStruct_Future {
	return SimpleStruct_Future{Future: p.Future.Field(0, nil)}
}

type ImportedStruct capnp.Struct

// ImportedStruct_TypeID is the unique identifier for the type ImportedStruct.
const ImportedStruct_TypeID = 0xd3d1d18e5d161304

func NewImportedStruct(s *capnp.Segment) (ImportedStruct, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ImportedStruct(st), err
}

func NewRootImportedStruct(s *capnp.Segment) (ImportedStruct, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ImportedStruct(st), err
}

func ReadRootImportedStruct(msg *capnp.Message) (ImportedStruct, error) {
	root, err := msg.Root()
	return ImportedStruct(root.Struct()), err
}

func (s ImportedStruct) String() string {
	str, _ := text.Marshal(0xd3d1d18e5d161304, capnp.Struct(s))
	return str
}

func (s ImportedStruct) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ImportedStruct) DecodeFromPtr(p capnp.Ptr) ImportedStruct {
	return ImportedStruct(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ImportedStruct) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ImportedStruct) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ImportedStruct) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ImportedStruct) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ImportedStruct) Field1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ImportedStruct) HasField1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ImportedStruct) Field1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ImportedStruct) SetField1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ImportedStruct) Field2() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s ImportedStruct) SetField2(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// ImportedStruct_List is a list of ImportedStruct.
type ImportedStruct_List = capnp.StructList[ImportedStruct]

// NewImportedStruct creates a new list of ImportedStruct.
func NewImportedStruct_List(s *capnp.Segment, sz int32) (ImportedStruct_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ImportedStruct](l), err
}

// ImportedStruct_Future is a wrapper for a ImportedStruct promised by a client call.
type ImportedStruct_Future struct{ *capnp.Future }

func (f ImportedStruct_Future) Struct() (ImportedStruct, error) {
	p, err := f.Future.Ptr()
	return ImportedStruct(p.Struct()), err
}

type AnotherImportedStruct capnp.Struct

// AnotherImportedStruct_TypeID is the unique identifier for the type AnotherImportedStruct.
const AnotherImportedStruct_TypeID = 0x8f5e39c304947823

func NewAnotherImportedStruct(s *capnp.Segment) (AnotherImportedStruct, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AnotherImportedStruct(st), err
}

func NewRootAnotherImportedStruct(s *capnp.Segment) (AnotherImportedStruct, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AnotherImportedStruct(st), err
}

func ReadRootAnotherImportedStruct(msg *capnp.Message) (AnotherImportedStruct, error) {
	root, err := msg.Root()
	return AnotherImportedStruct(root.Struct()), err
}

func (s AnotherImportedStruct) String() string {
	str, _ := text.Marshal(0x8f5e39c304947823, capnp.Struct(s))
	return str
}

func (s AnotherImportedStruct) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AnotherImportedStruct) DecodeFromPtr(p capnp.Ptr) AnotherImportedStruct {
	return AnotherImportedStruct(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AnotherImportedStruct) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AnotherImportedStruct) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AnotherImportedStruct) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AnotherImportedStruct) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AnotherImportedStruct) NestedField() (ImportedStruct, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ImportedStruct(p.Struct()), err
}

func (s AnotherImportedStruct) HasNestedField() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AnotherImportedStruct) SetNestedField(v ImportedStruct) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNestedField sets the nestedField field to a newly
// allocated ImportedStruct struct, preferring placement in s's segment.
func (s AnotherImportedStruct) NewNestedField() (ImportedStruct, error) {
	ss, err := NewImportedStruct(capnp.Struct(s).Segment())
	if err != nil {
		return ImportedStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AnotherImportedStruct) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s AnotherImportedStruct) SetValue(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// AnotherImportedStruct_List is a list of AnotherImportedStruct.
type AnotherImportedStruct_List = capnp.StructList[AnotherImportedStruct]

// NewAnotherImportedStruct creates a new list of AnotherImportedStruct.
func NewAnotherImportedStruct_List(s *capnp.Segment, sz int32) (AnotherImportedStruct_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AnotherImportedStruct](l), err
}

// AnotherImportedStruct_Future is a wrapper for a AnotherImportedStruct promised by a client call.
type AnotherImportedStruct_Future struct{ *capnp.Future }

func (f AnotherImportedStruct_Future) Struct() (AnotherImportedStruct, error) {
	p, err := f.Future.Ptr()
	return AnotherImportedStruct(p.Struct()), err
}
func (p AnotherImportedStruct_Future) NestedField() ImportedStruct_Future {
	return ImportedStruct_Future{Future: p.Future.Field(0, nil)}
}

type ComplexStruct capnp.Struct

// ComplexStruct_TypeID is the unique identifier for the type ComplexStruct.
const ComplexStruct_TypeID = 0x920bec9efabade93

func NewComplexStruct(s *capnp.Segment) (ComplexStruct, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ComplexStruct(st), err
}

func NewRootComplexStruct(s *capnp.Segment) (ComplexStruct, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ComplexStruct(st), err
}

func ReadRootComplexStruct(msg *capnp.Message) (ComplexStruct, error) {
	root, err := msg.Root()
	return ComplexStruct(root.Struct()), err
}

func (s ComplexStruct) String() string {
	str, _ := text.Marshal(0x920bec9efabade93, capnp.Struct(s))
	return str
}

func (s ComplexStruct) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ComplexStruct) DecodeFromPtr(p capnp.Ptr) ComplexStruct {
	return ComplexStruct(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ComplexStruct) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ComplexStruct) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ComplexStruct) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ComplexStruct) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ComplexStruct) EmbeddedImport() (ImportedStruct, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ImportedStruct(p.Struct()), err
}

func (s ComplexStruct) HasEmbeddedImport() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ComplexStruct) SetEmbeddedImport(v ImportedStruct) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEmbeddedImport sets the embeddedImport field to a newly
// allocated ImportedStruct struct, preferring placement in s's segment.
func (s ComplexStruct) NewEmbeddedImport() (ImportedStruct, error) {
	ss, err := NewImportedStruct(capnp.Struct(s).Segment())
	if err != nil {
		return ImportedStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ComplexStruct) AnotherField() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ComplexStruct) HasAnotherField() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ComplexStruct) AnotherFieldBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ComplexStruct) SetAnotherField(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ComplexStruct) Nested() (AnotherImportedStruct, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return AnotherImportedStruct(p.Struct()), err
}

func (s ComplexStruct) HasNested() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ComplexStruct) SetNested(v AnotherImportedStruct) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewNested sets the nested field to a newly
// allocated AnotherImportedStruct struct, preferring placement in s's segment.
func (s ComplexStruct) NewNested() (AnotherImportedStruct, error) {
	ss, err := NewAnotherImportedStruct(capnp.Struct(s).Segment())
	if err != nil {
		return AnotherImportedStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ComplexStruct_List is a list of ComplexStruct.
type ComplexStruct_List = capnp.StructList[ComplexStruct]

// NewComplexStruct creates a new list of ComplexStruct.
func NewComplexStruct_List(s *capnp.Segment, sz int32) (ComplexStruct_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ComplexStruct](l), err
}

// ComplexStruct_Future is a wrapper for a ComplexStruct promised by a client call.
type ComplexStruct_Future struct{ *capnp.Future }

func (f ComplexStruct_Future) Struct() (ComplexStruct, error) {
	p, err := f.Future.Ptr()
	return ComplexStruct(p.Struct()), err
}
func (p ComplexStruct_Future) EmbeddedImport() ImportedStruct_Future {
	return ImportedStruct_Future{Future: p.Future.Field(0, nil)}
}
func (p ComplexStruct_Future) Nested() AnotherImportedStruct_Future {
	return AnotherImportedStruct_Future{Future: p.Future.Field(2, nil)}
}

type MyInterface capnp.Client

// MyInterface_TypeID is the unique identifier for the type MyInterface.
const MyInterface_TypeID = 0x8eadf04278adb251

func (c MyInterface) Foo(ctx context.Context, params func(MyInterface_foo_Params) error) (MyInterface_foo_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      0,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "foo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MyInterface_foo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MyInterface_foo_Results_Future{Future: ans.Future()}, release

}

func (c MyInterface) Bar(ctx context.Context, params func(MyInterface_bar_Params) error) (MyInterface_bar_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      1,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "bar",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MyInterface_bar_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MyInterface_bar_Results_Future{Future: ans.Future()}, release

}

func (c MyInterface) Baz(ctx context.Context, params func(MyInterface_baz_Params) error) (MyInterface_baz_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      2,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "baz",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MyInterface_baz_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MyInterface_baz_Results_Future{Future: ans.Future()}, release

}

func (c MyInterface) MultipleReturns(ctx context.Context, params func(MyInterface_multipleReturns_Params) error) (MyInterface_multipleReturns_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      3,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "multipleReturns",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MyInterface_multipleReturns_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MyInterface_multipleReturns_Results_Future{Future: ans.Future()}, release

}

func (c MyInterface) NestedReturn(ctx context.Context, params func(MyInterface_nestedReturn_Params) error) (MyInterface_nestedReturn_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      4,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "nestedReturn",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MyInterface_nestedReturn_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MyInterface_nestedReturn_Results_Future{Future: ans.Future()}, release

}

func (c MyInterface) ImportTest(ctx context.Context, params func(MyInterface_importTest_Params) error) (MyInterface_importTest_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      5,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "importTest",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(MyInterface_importTest_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return MyInterface_importTest_Results_Future{Future: ans.Future()}, release

}

func (c MyInterface) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c MyInterface) String() string {
	return "MyInterface(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c MyInterface) AddRef() MyInterface {
	return MyInterface(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c MyInterface) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c MyInterface) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c MyInterface) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (MyInterface) DecodeFromPtr(p capnp.Ptr) MyInterface {
	return MyInterface(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c MyInterface) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c MyInterface) IsSame(other MyInterface) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c MyInterface) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c MyInterface) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A MyInterface_Server is a MyInterface with a local implementation.
type MyInterface_Server interface {
	Foo(context.Context, MyInterface_foo) error

	Bar(context.Context, MyInterface_bar) error

	Baz(context.Context, MyInterface_baz) error

	MultipleReturns(context.Context, MyInterface_multipleReturns) error

	NestedReturn(context.Context, MyInterface_nestedReturn) error

	ImportTest(context.Context, MyInterface_importTest) error
}

// MyInterface_NewServer creates a new Server from an implementation of MyInterface_Server.
func MyInterface_NewServer(s MyInterface_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(MyInterface_Methods(nil, s), s, c)
}

// MyInterface_ServerToClient creates a new Client from an implementation of MyInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func MyInterface_ServerToClient(s MyInterface_Server) MyInterface {
	return MyInterface(capnp.NewClient(MyInterface_NewServer(s)))
}

// MyInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func MyInterface_Methods(methods []server.Method, s MyInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      0,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "foo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Foo(ctx, MyInterface_foo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      1,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "bar",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Bar(ctx, MyInterface_bar{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      2,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "baz",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Baz(ctx, MyInterface_baz{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      3,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "multipleReturns",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MultipleReturns(ctx, MyInterface_multipleReturns{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      4,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "nestedReturn",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NestedReturn(ctx, MyInterface_nestedReturn{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8eadf04278adb251,
			MethodID:      5,
			InterfaceName: "testdata/expected_output.capnp:MyInterface",
			MethodName:    "importTest",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ImportTest(ctx, MyInterface_importTest{call})
		},
	})

	return methods
}

// MyInterface_foo holds the state for a server call to MyInterface.foo.
// See server.Call for documentation.
type MyInterface_foo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MyInterface_foo) Args() MyInterface_foo_Params {
	return MyInterface_foo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MyInterface_foo) AllocResults() (MyInterface_foo_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_foo_Results(r), err
}

// MyInterface_bar holds the state for a server call to MyInterface.bar.
// See server.Call for documentation.
type MyInterface_bar struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MyInterface_bar) Args() MyInterface_bar_Params {
	return MyInterface_bar_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MyInterface_bar) AllocResults() (MyInterface_bar_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_bar_Results(r), err
}

// MyInterface_baz holds the state for a server call to MyInterface.baz.
// See server.Call for documentation.
type MyInterface_baz struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MyInterface_baz) Args() MyInterface_baz_Params {
	return MyInterface_baz_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MyInterface_baz) AllocResults() (MyInterface_baz_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_baz_Results(r), err
}

// MyInterface_multipleReturns holds the state for a server call to MyInterface.multipleReturns.
// See server.Call for documentation.
type MyInterface_multipleReturns struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MyInterface_multipleReturns) Args() MyInterface_multipleReturns_Params {
	return MyInterface_multipleReturns_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MyInterface_multipleReturns) AllocResults() (MyInterface_multipleReturns_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MyInterface_multipleReturns_Results(r), err
}

// MyInterface_nestedReturn holds the state for a server call to MyInterface.nestedReturn.
// See server.Call for documentation.
type MyInterface_nestedReturn struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MyInterface_nestedReturn) Args() MyInterface_nestedReturn_Params {
	return MyInterface_nestedReturn_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MyInterface_nestedReturn) AllocResults() (MyInterface_nestedReturn_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_nestedReturn_Results(r), err
}

// MyInterface_importTest holds the state for a server call to MyInterface.importTest.
// See server.Call for documentation.
type MyInterface_importTest struct {
	*server.Call
}

// Args returns the call's arguments.
func (c MyInterface_importTest) Args() MyInterface_importTest_Params {
	return MyInterface_importTest_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c MyInterface_importTest) AllocResults() (MyInterface_importTest_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_importTest_Results(r), err
}

// MyInterface_List is a list of MyInterface.
type MyInterface_List = capnp.CapList[MyInterface]

// NewMyInterface_List creates a new list of MyInterface.
func NewMyInterface_List(s *capnp.Segment, sz int32) (MyInterface_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[MyInterface](l), err
}

type MyInterface_foo_Params capnp.Struct

// MyInterface_foo_Params_TypeID is the unique identifier for the type MyInterface_foo_Params.
const MyInterface_foo_Params_TypeID = 0xcaa8e09b773148ee

func NewMyInterface_foo_Params(s *capnp.Segment) (MyInterface_foo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MyInterface_foo_Params(st), err
}

func NewRootMyInterface_foo_Params(s *capnp.Segment) (MyInterface_foo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MyInterface_foo_Params(st), err
}

func ReadRootMyInterface_foo_Params(msg *capnp.Message) (MyInterface_foo_Params, error) {
	root, err := msg.Root()
	return MyInterface_foo_Params(root.Struct()), err
}

func (s MyInterface_foo_Params) String() string {
	str, _ := text.Marshal(0xcaa8e09b773148ee, capnp.Struct(s))
	return str
}

func (s MyInterface_foo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_foo_Params) DecodeFromPtr(p capnp.Ptr) MyInterface_foo_Params {
	return MyInterface_foo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_foo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_foo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_foo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_foo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_foo_Params) X() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MyInterface_foo_Params) SetX(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

// MyInterface_foo_Params_List is a list of MyInterface_foo_Params.
type MyInterface_foo_Params_List = capnp.StructList[MyInterface_foo_Params]

// NewMyInterface_foo_Params creates a new list of MyInterface_foo_Params.
func NewMyInterface_foo_Params_List(s *capnp.Segment, sz int32) (MyInterface_foo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MyInterface_foo_Params](l), err
}

// MyInterface_foo_Params_Future is a wrapper for a MyInterface_foo_Params promised by a client call.
type MyInterface_foo_Params_Future struct{ *capnp.Future }

func (f MyInterface_foo_Params_Future) Struct() (MyInterface_foo_Params, error) {
	p, err := f.Future.Ptr()
	return MyInterface_foo_Params(p.Struct()), err
}

type MyInterface_foo_Results capnp.Struct

// MyInterface_foo_Results_TypeID is the unique identifier for the type MyInterface_foo_Results.
const MyInterface_foo_Results_TypeID = 0x949b28cfa7865ace

func NewMyInterface_foo_Results(s *capnp.Segment) (MyInterface_foo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_foo_Results(st), err
}

func NewRootMyInterface_foo_Results(s *capnp.Segment) (MyInterface_foo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_foo_Results(st), err
}

func ReadRootMyInterface_foo_Results(msg *capnp.Message) (MyInterface_foo_Results, error) {
	root, err := msg.Root()
	return MyInterface_foo_Results(root.Struct()), err
}

func (s MyInterface_foo_Results) String() string {
	str, _ := text.Marshal(0x949b28cfa7865ace, capnp.Struct(s))
	return str
}

func (s MyInterface_foo_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_foo_Results) DecodeFromPtr(p capnp.Ptr) MyInterface_foo_Results {
	return MyInterface_foo_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_foo_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_foo_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_foo_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_foo_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_foo_Results) Result0() (SimpleStruct, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SimpleStruct(p.Struct()), err
}

func (s MyInterface_foo_Results) HasResult0() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MyInterface_foo_Results) SetResult0(v SimpleStruct) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult0 sets the result0 field to a newly
// allocated SimpleStruct struct, preferring placement in s's segment.
func (s MyInterface_foo_Results) NewResult0() (SimpleStruct, error) {
	ss, err := NewSimpleStruct(capnp.Struct(s).Segment())
	if err != nil {
		return SimpleStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MyInterface_foo_Results_List is a list of MyInterface_foo_Results.
type MyInterface_foo_Results_List = capnp.StructList[MyInterface_foo_Results]

// NewMyInterface_foo_Results creates a new list of MyInterface_foo_Results.
func NewMyInterface_foo_Results_List(s *capnp.Segment, sz int32) (MyInterface_foo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MyInterface_foo_Results](l), err
}

// MyInterface_foo_Results_Future is a wrapper for a MyInterface_foo_Results promised by a client call.
type MyInterface_foo_Results_Future struct{ *capnp.Future }

func (f MyInterface_foo_Results_Future) Struct() (MyInterface_foo_Results, error) {
	p, err := f.Future.Ptr()
	return MyInterface_foo_Results(p.Struct()), err
}
func (p MyInterface_foo_Results_Future) Result0() SimpleStruct_Future {
	return SimpleStruct_Future{Future: p.Future.Field(0, nil)}
}

type MyInterface_bar_Params capnp.Struct

// MyInterface_bar_Params_TypeID is the unique identifier for the type MyInterface_bar_Params.
const MyInterface_bar_Params_TypeID = 0xce9f50056d7f7433

func NewMyInterface_bar_Params(s *capnp.Segment) (MyInterface_bar_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_bar_Params(st), err
}

func NewRootMyInterface_bar_Params(s *capnp.Segment) (MyInterface_bar_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_bar_Params(st), err
}

func ReadRootMyInterface_bar_Params(msg *capnp.Message) (MyInterface_bar_Params, error) {
	root, err := msg.Root()
	return MyInterface_bar_Params(root.Struct()), err
}

func (s MyInterface_bar_Params) String() string {
	str, _ := text.Marshal(0xce9f50056d7f7433, capnp.Struct(s))
	return str
}

func (s MyInterface_bar_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_bar_Params) DecodeFromPtr(p capnp.Ptr) MyInterface_bar_Params {
	return MyInterface_bar_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_bar_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_bar_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_bar_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_bar_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_bar_Params) Y() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s MyInterface_bar_Params) HasY() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MyInterface_bar_Params) YBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s MyInterface_bar_Params) SetY(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// MyInterface_bar_Params_List is a list of MyInterface_bar_Params.
type MyInterface_bar_Params_List = capnp.StructList[MyInterface_bar_Params]

// NewMyInterface_bar_Params creates a new list of MyInterface_bar_Params.
func NewMyInterface_bar_Params_List(s *capnp.Segment, sz int32) (MyInterface_bar_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MyInterface_bar_Params](l), err
}

// MyInterface_bar_Params_Future is a wrapper for a MyInterface_bar_Params promised by a client call.
type MyInterface_bar_Params_Future struct{ *capnp.Future }

func (f MyInterface_bar_Params_Future) Struct() (MyInterface_bar_Params, error) {
	p, err := f.Future.Ptr()
	return MyInterface_bar_Params(p.Struct()), err
}

type MyInterface_bar_Results capnp.Struct

// MyInterface_bar_Results_TypeID is the unique identifier for the type MyInterface_bar_Results.
const MyInterface_bar_Results_TypeID = 0xa66ab70a503f5495

func NewMyInterface_bar_Results(s *capnp.Segment) (MyInterface_bar_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_bar_Results(st), err
}

func NewRootMyInterface_bar_Results(s *capnp.Segment) (MyInterface_bar_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_bar_Results(st), err
}

func ReadRootMyInterface_bar_Results(msg *capnp.Message) (MyInterface_bar_Results, error) {
	root, err := msg.Root()
	return MyInterface_bar_Results(root.Struct()), err
}

func (s MyInterface_bar_Results) String() string {
	str, _ := text.Marshal(0xa66ab70a503f5495, capnp.Struct(s))
	return str
}

func (s MyInterface_bar_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_bar_Results) DecodeFromPtr(p capnp.Ptr) MyInterface_bar_Results {
	return MyInterface_bar_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_bar_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_bar_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_bar_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_bar_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_bar_Results) Result0() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s MyInterface_bar_Results) HasResult0() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MyInterface_bar_Results) Result0Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s MyInterface_bar_Results) SetResult0(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// MyInterface_bar_Results_List is a list of MyInterface_bar_Results.
type MyInterface_bar_Results_List = capnp.StructList[MyInterface_bar_Results]

// NewMyInterface_bar_Results creates a new list of MyInterface_bar_Results.
func NewMyInterface_bar_Results_List(s *capnp.Segment, sz int32) (MyInterface_bar_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MyInterface_bar_Results](l), err
}

// MyInterface_bar_Results_Future is a wrapper for a MyInterface_bar_Results promised by a client call.
type MyInterface_bar_Results_Future struct{ *capnp.Future }

func (f MyInterface_bar_Results_Future) Struct() (MyInterface_bar_Results, error) {
	p, err := f.Future.Ptr()
	return MyInterface_bar_Results(p.Struct()), err
}

type MyInterface_baz_Params capnp.Struct

// MyInterface_baz_Params_TypeID is the unique identifier for the type MyInterface_baz_Params.
const MyInterface_baz_Params_TypeID = 0xf8f09a78b73cb359

func NewMyInterface_baz_Params(s *capnp.Segment) (MyInterface_baz_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_baz_Params(st), err
}

func NewRootMyInterface_baz_Params(s *capnp.Segment) (MyInterface_baz_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_baz_Params(st), err
}

func ReadRootMyInterface_baz_Params(msg *capnp.Message) (MyInterface_baz_Params, error) {
	root, err := msg.Root()
	return MyInterface_baz_Params(root.Struct()), err
}

func (s MyInterface_baz_Params) String() string {
	str, _ := text.Marshal(0xf8f09a78b73cb359, capnp.Struct(s))
	return str
}

func (s MyInterface_baz_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_baz_Params) DecodeFromPtr(p capnp.Ptr) MyInterface_baz_Params {
	return MyInterface_baz_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_baz_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_baz_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_baz_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_baz_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_baz_Params) Arr() (capnp.Int32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Int32List(p.List()), err
}

func (s MyInterface_baz_Params) HasArr() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MyInterface_baz_Params) SetArr(v capnp.Int32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArr sets the arr field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s MyInterface_baz_Params) NewArr(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MyInterface_baz_Params_List is a list of MyInterface_baz_Params.
type MyInterface_baz_Params_List = capnp.StructList[MyInterface_baz_Params]

// NewMyInterface_baz_Params creates a new list of MyInterface_baz_Params.
func NewMyInterface_baz_Params_List(s *capnp.Segment, sz int32) (MyInterface_baz_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MyInterface_baz_Params](l), err
}

// MyInterface_baz_Params_Future is a wrapper for a MyInterface_baz_Params promised by a client call.
type MyInterface_baz_Params_Future struct{ *capnp.Future }

func (f MyInterface_baz_Params_Future) Struct() (MyInterface_baz_Params, error) {
	p, err := f.Future.Ptr()
	return MyInterface_baz_Params(p.Struct()), err
}

type MyInterface_baz_Results capnp.Struct

// MyInterface_baz_Results_TypeID is the unique identifier for the type MyInterface_baz_Results.
const MyInterface_baz_Results_TypeID = 0xc2651d002463cf3f

func NewMyInterface_baz_Results(s *capnp.Segment) (MyInterface_baz_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_baz_Results(st), err
}

func NewRootMyInterface_baz_Results(s *capnp.Segment) (MyInterface_baz_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_baz_Results(st), err
}

func ReadRootMyInterface_baz_Results(msg *capnp.Message) (MyInterface_baz_Results, error) {
	root, err := msg.Root()
	return MyInterface_baz_Results(root.Struct()), err
}

func (s MyInterface_baz_Results) String() string {
	str, _ := text.Marshal(0xc2651d002463cf3f, capnp.Struct(s))
	return str
}

func (s MyInterface_baz_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_baz_Results) DecodeFromPtr(p capnp.Ptr) MyInterface_baz_Results {
	return MyInterface_baz_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_baz_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_baz_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_baz_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_baz_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_baz_Results) Result0() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s MyInterface_baz_Results) HasResult0() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MyInterface_baz_Results) SetResult0(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewResult0 sets the result0 field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MyInterface_baz_Results) NewResult0(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MyInterface_baz_Results_List is a list of MyInterface_baz_Results.
type MyInterface_baz_Results_List = capnp.StructList[MyInterface_baz_Results]

// NewMyInterface_baz_Results creates a new list of MyInterface_baz_Results.
func NewMyInterface_baz_Results_List(s *capnp.Segment, sz int32) (MyInterface_baz_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MyInterface_baz_Results](l), err
}

// MyInterface_baz_Results_Future is a wrapper for a MyInterface_baz_Results promised by a client call.
type MyInterface_baz_Results_Future struct{ *capnp.Future }

func (f MyInterface_baz_Results_Future) Struct() (MyInterface_baz_Results, error) {
	p, err := f.Future.Ptr()
	return MyInterface_baz_Results(p.Struct()), err
}

type MyInterface_multipleReturns_Params capnp.Struct

// MyInterface_multipleReturns_Params_TypeID is the unique identifier for the type MyInterface_multipleReturns_Params.
const MyInterface_multipleReturns_Params_TypeID = 0xee0c96a2ffc1a2e3

func NewMyInterface_multipleReturns_Params(s *capnp.Segment) (MyInterface_multipleReturns_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MyInterface_multipleReturns_Params(st), err
}

func NewRootMyInterface_multipleReturns_Params(s *capnp.Segment) (MyInterface_multipleReturns_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MyInterface_multipleReturns_Params(st), err
}

func ReadRootMyInterface_multipleReturns_Params(msg *capnp.Message) (MyInterface_multipleReturns_Params, error) {
	root, err := msg.Root()
	return MyInterface_multipleReturns_Params(root.Struct()), err
}

func (s MyInterface_multipleReturns_Params) String() string {
	str, _ := text.Marshal(0xee0c96a2ffc1a2e3, capnp.Struct(s))
	return str
}

func (s MyInterface_multipleReturns_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_multipleReturns_Params) DecodeFromPtr(p capnp.Ptr) MyInterface_multipleReturns_Params {
	return MyInterface_multipleReturns_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_multipleReturns_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_multipleReturns_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_multipleReturns_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_multipleReturns_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MyInterface_multipleReturns_Params_List is a list of MyInterface_multipleReturns_Params.
type MyInterface_multipleReturns_Params_List = capnp.StructList[MyInterface_multipleReturns_Params]

// NewMyInterface_multipleReturns_Params creates a new list of MyInterface_multipleReturns_Params.
func NewMyInterface_multipleReturns_Params_List(s *capnp.Segment, sz int32) (MyInterface_multipleReturns_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MyInterface_multipleReturns_Params](l), err
}

// MyInterface_multipleReturns_Params_Future is a wrapper for a MyInterface_multipleReturns_Params promised by a client call.
type MyInterface_multipleReturns_Params_Future struct{ *capnp.Future }

func (f MyInterface_multipleReturns_Params_Future) Struct() (MyInterface_multipleReturns_Params, error) {
	p, err := f.Future.Ptr()
	return MyInterface_multipleReturns_Params(p.Struct()), err
}

type MyInterface_multipleReturns_Results capnp.Struct

// MyInterface_multipleReturns_Results_TypeID is the unique identifier for the type MyInterface_multipleReturns_Results.
const MyInterface_multipleReturns_Results_TypeID = 0x959a6064f76bb3dc

func NewMyInterface_multipleReturns_Results(s *capnp.Segment) (MyInterface_multipleReturns_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MyInterface_multipleReturns_Results(st), err
}

func NewRootMyInterface_multipleReturns_Results(s *capnp.Segment) (MyInterface_multipleReturns_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MyInterface_multipleReturns_Results(st), err
}

func ReadRootMyInterface_multipleReturns_Results(msg *capnp.Message) (MyInterface_multipleReturns_Results, error) {
	root, err := msg.Root()
	return MyInterface_multipleReturns_Results(root.Struct()), err
}

func (s MyInterface_multipleReturns_Results) String() string {
	str, _ := text.Marshal(0x959a6064f76bb3dc, capnp.Struct(s))
	return str
}

func (s MyInterface_multipleReturns_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_multipleReturns_Results) DecodeFromPtr(p capnp.Ptr) MyInterface_multipleReturns_Results {
	return MyInterface_multipleReturns_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_multipleReturns_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_multipleReturns_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_multipleReturns_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_multipleReturns_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_multipleReturns_Results) Result0() int32 {
	return int32(capnp.Struct(s).Uint32(0))
}

func (s MyInterface_multipleReturns_Results) SetResult0(v int32) {
	capnp.Struct(s).SetUint32(0, uint32(v))
}

func (s MyInterface_multipleReturns_Results) Result1() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s MyInterface_multipleReturns_Results) HasResult1() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MyInterface_multipleReturns_Results) Result1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s MyInterface_multipleReturns_Results) SetResult1(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// MyInterface_multipleReturns_Results_List is a list of MyInterface_multipleReturns_Results.
type MyInterface_multipleReturns_Results_List = capnp.StructList[MyInterface_multipleReturns_Results]

// NewMyInterface_multipleReturns_Results creates a new list of MyInterface_multipleReturns_Results.
func NewMyInterface_multipleReturns_Results_List(s *capnp.Segment, sz int32) (MyInterface_multipleReturns_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MyInterface_multipleReturns_Results](l), err
}

// MyInterface_multipleReturns_Results_Future is a wrapper for a MyInterface_multipleReturns_Results promised by a client call.
type MyInterface_multipleReturns_Results_Future struct{ *capnp.Future }

func (f MyInterface_multipleReturns_Results_Future) Struct() (MyInterface_multipleReturns_Results, error) {
	p, err := f.Future.Ptr()
	return MyInterface_multipleReturns_Results(p.Struct()), err
}

type MyInterface_nestedReturn_Params capnp.Struct

// MyInterface_nestedReturn_Params_TypeID is the unique identifier for the type MyInterface_nestedReturn_Params.
const MyInterface_nestedReturn_Params_TypeID = 0xb4d2e2a48eddab77

func NewMyInterface_nestedReturn_Params(s *capnp.Segment) (MyInterface_nestedReturn_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MyInterface_nestedReturn_Params(st), err
}

func NewRootMyInterface_nestedReturn_Params(s *capnp.Segment) (MyInterface_nestedReturn_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MyInterface_nestedReturn_Params(st), err
}

func ReadRootMyInterface_nestedReturn_Params(msg *capnp.Message) (MyInterface_nestedReturn_Params, error) {
	root, err := msg.Root()
	return MyInterface_nestedReturn_Params(root.Struct()), err
}

func (s MyInterface_nestedReturn_Params) String() string {
	str, _ := text.Marshal(0xb4d2e2a48eddab77, capnp.Struct(s))
	return str
}

func (s MyInterface_nestedReturn_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_nestedReturn_Params) DecodeFromPtr(p capnp.Ptr) MyInterface_nestedReturn_Params {
	return MyInterface_nestedReturn_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_nestedReturn_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_nestedReturn_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_nestedReturn_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_nestedReturn_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MyInterface_nestedReturn_Params_List is a list of MyInterface_nestedReturn_Params.
type MyInterface_nestedReturn_Params_List = capnp.StructList[MyInterface_nestedReturn_Params]

// NewMyInterface_nestedReturn_Params creates a new list of MyInterface_nestedReturn_Params.
func NewMyInterface_nestedReturn_Params_List(s *capnp.Segment, sz int32) (MyInterface_nestedReturn_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MyInterface_nestedReturn_Params](l), err
}

// MyInterface_nestedReturn_Params_Future is a wrapper for a MyInterface_nestedReturn_Params promised by a client call.
type MyInterface_nestedReturn_Params_Future struct{ *capnp.Future }

func (f MyInterface_nestedReturn_Params_Future) Struct() (MyInterface_nestedReturn_Params, error) {
	p, err := f.Future.Ptr()
	return MyInterface_nestedReturn_Params(p.Struct()), err
}

type MyInterface_nestedReturn_Results capnp.Struct

// MyInterface_nestedReturn_Results_TypeID is the unique identifier for the type MyInterface_nestedReturn_Results.
const MyInterface_nestedReturn_Results_TypeID = 0x8aee30e857cedeb1

func NewMyInterface_nestedReturn_Results(s *capnp.Segment) (MyInterface_nestedReturn_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_nestedReturn_Results(st), err
}

func NewRootMyInterface_nestedReturn_Results(s *capnp.Segment) (MyInterface_nestedReturn_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_nestedReturn_Results(st), err
}

func ReadRootMyInterface_nestedReturn_Results(msg *capnp.Message) (MyInterface_nestedReturn_Results, error) {
	root, err := msg.Root()
	return MyInterface_nestedReturn_Results(root.Struct()), err
}

func (s MyInterface_nestedReturn_Results) String() string {
	str, _ := text.Marshal(0x8aee30e857cedeb1, capnp.Struct(s))
	return str
}

func (s MyInterface_nestedReturn_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_nestedReturn_Results) DecodeFromPtr(p capnp.Ptr) MyInterface_nestedReturn_Results {
	return MyInterface_nestedReturn_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_nestedReturn_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_nestedReturn_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_nestedReturn_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_nestedReturn_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_nestedReturn_Results) Result0() (NestedStruct, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return NestedStruct(p.Struct()), err
}

func (s MyInterface_nestedReturn_Results) HasResult0() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MyInterface_nestedReturn_Results) SetResult0(v NestedStruct) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult0 sets the result0 field to a newly
// allocated NestedStruct struct, preferring placement in s's segment.
func (s MyInterface_nestedReturn_Results) NewResult0() (NestedStruct, error) {
	ss, err := NewNestedStruct(capnp.Struct(s).Segment())
	if err != nil {
		return NestedStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MyInterface_nestedReturn_Results_List is a list of MyInterface_nestedReturn_Results.
type MyInterface_nestedReturn_Results_List = capnp.StructList[MyInterface_nestedReturn_Results]

// NewMyInterface_nestedReturn_Results creates a new list of MyInterface_nestedReturn_Results.
func NewMyInterface_nestedReturn_Results_List(s *capnp.Segment, sz int32) (MyInterface_nestedReturn_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MyInterface_nestedReturn_Results](l), err
}

// MyInterface_nestedReturn_Results_Future is a wrapper for a MyInterface_nestedReturn_Results promised by a client call.
type MyInterface_nestedReturn_Results_Future struct{ *capnp.Future }

func (f MyInterface_nestedReturn_Results_Future) Struct() (MyInterface_nestedReturn_Results, error) {
	p, err := f.Future.Ptr()
	return MyInterface_nestedReturn_Results(p.Struct()), err
}
func (p MyInterface_nestedReturn_Results_Future) Result0() NestedStruct_Future {
	return NestedStruct_Future{Future: p.Future.Field(0, nil)}
}

type MyInterface_importTest_Params capnp.Struct

// MyInterface_importTest_Params_TypeID is the unique identifier for the type MyInterface_importTest_Params.
const MyInterface_importTest_Params_TypeID = 0xff1a812a69627ab3

func NewMyInterface_importTest_Params(s *capnp.Segment) (MyInterface_importTest_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MyInterface_importTest_Params(st), err
}

func NewRootMyInterface_importTest_Params(s *capnp.Segment) (MyInterface_importTest_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MyInterface_importTest_Params(st), err
}

func ReadRootMyInterface_importTest_Params(msg *capnp.Message) (MyInterface_importTest_Params, error) {
	root, err := msg.Root()
	return MyInterface_importTest_Params(root.Struct()), err
}

func (s MyInterface_importTest_Params) String() string {
	str, _ := text.Marshal(0xff1a812a69627ab3, capnp.Struct(s))
	return str
}

func (s MyInterface_importTest_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_importTest_Params) DecodeFromPtr(p capnp.Ptr) MyInterface_importTest_Params {
	return MyInterface_importTest_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_importTest_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_importTest_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_importTest_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_importTest_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// MyInterface_importTest_Params_List is a list of MyInterface_importTest_Params.
type MyInterface_importTest_Params_List = capnp.StructList[MyInterface_importTest_Params]

// NewMyInterface_importTest_Params creates a new list of MyInterface_importTest_Params.
func NewMyInterface_importTest_Params_List(s *capnp.Segment, sz int32) (MyInterface_importTest_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[MyInterface_importTest_Params](l), err
}

// MyInterface_importTest_Params_Future is a wrapper for a MyInterface_importTest_Params promised by a client call.
type MyInterface_importTest_Params_Future struct{ *capnp.Future }

func (f MyInterface_importTest_Params_Future) Struct() (MyInterface_importTest_Params, error) {
	p, err := f.Future.Ptr()
	return MyInterface_importTest_Params(p.Struct()), err
}

type MyInterface_importTest_Results capnp.Struct

// MyInterface_importTest_Results_TypeID is the unique identifier for the type MyInterface_importTest_Results.
const MyInterface_importTest_Results_TypeID = 0x9b06609970cb32a8

func NewMyInterface_importTest_Results(s *capnp.Segment) (MyInterface_importTest_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_importTest_Results(st), err
}

func NewRootMyInterface_importTest_Results(s *capnp.Segment) (MyInterface_importTest_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MyInterface_importTest_Results(st), err
}

func ReadRootMyInterface_importTest_Results(msg *capnp.Message) (MyInterface_importTest_Results, error) {
	root, err := msg.Root()
	return MyInterface_importTest_Results(root.Struct()), err
}

func (s MyInterface_importTest_Results) String() string {
	str, _ := text.Marshal(0x9b06609970cb32a8, capnp.Struct(s))
	return str
}

func (s MyInterface_importTest_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MyInterface_importTest_Results) DecodeFromPtr(p capnp.Ptr) MyInterface_importTest_Results {
	return MyInterface_importTest_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MyInterface_importTest_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MyInterface_importTest_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MyInterface_importTest_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MyInterface_importTest_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MyInterface_importTest_Results) Result0() (ImportedStruct, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ImportedStruct(p.Struct()), err
}

func (s MyInterface_importTest_Results) HasResult0() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MyInterface_importTest_Results) SetResult0(v ImportedStruct) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult0 sets the result0 field to a newly
// allocated ImportedStruct struct, preferring placement in s's segment.
func (s MyInterface_importTest_Results) NewResult0() (ImportedStruct, error) {
	ss, err := NewImportedStruct(capnp.Struct(s).Segment())
	if err != nil {
		return ImportedStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// MyInterface_importTest_Results_List is a list of MyInterface_importTest_Results.
type MyInterface_importTest_Results_List = capnp.StructList[MyInterface_importTest_Results]

// NewMyInterface_importTest_Results creates a new list of MyInterface_importTest_Results.
func NewMyInterface_importTest_Results_List(s *capnp.Segment, sz int32) (MyInterface_importTest_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[MyInterface_importTest_Results](l), err
}

// MyInterface_importTest_Results_Future is a wrapper for a MyInterface_importTest_Results promised by a client call.
type MyInterface_importTest_Results_Future struct{ *capnp.Future }

func (f MyInterface_importTest_Results_Future) Struct() (MyInterface_importTest_Results, error) {
	p, err := f.Future.Ptr()
	return MyInterface_importTest_Results(p.Struct()), err
}
func (p MyInterface_importTest_Results_Future) Result0() ImportedStruct_Future {
	return ImportedStruct_Future{Future: p.Future.Field(0, nil)}
}

type AnotherInterface capnp.Client

// AnotherInterface_TypeID is the unique identifier for the type AnotherInterface.
const AnotherInterface_TypeID = 0xbe4377923e5ac213

func (c AnotherInterface) ComplexMethod(ctx context.Context, params func(AnotherInterface_complexMethod_Params) error) (AnotherInterface_complexMethod_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbe4377923e5ac213,
			MethodID:      0,
			InterfaceName: "testdata/expected_output.capnp:AnotherInterface",
			MethodName:    "complexMethod",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnotherInterface_complexMethod_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AnotherInterface_complexMethod_Results_Future{Future: ans.Future()}, release

}

func (c AnotherInterface) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AnotherInterface) String() string {
	return "AnotherInterface(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AnotherInterface) AddRef() AnotherInterface {
	return AnotherInterface(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AnotherInterface) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AnotherInterface) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AnotherInterface) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AnotherInterface) DecodeFromPtr(p capnp.Ptr) AnotherInterface {
	return AnotherInterface(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AnotherInterface) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AnotherInterface) IsSame(other AnotherInterface) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AnotherInterface) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AnotherInterface) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A AnotherInterface_Server is a AnotherInterface with a local implementation.
type AnotherInterface_Server interface {
	ComplexMethod(context.Context, AnotherInterface_complexMethod) error
}

// AnotherInterface_NewServer creates a new Server from an implementation of AnotherInterface_Server.
func AnotherInterface_NewServer(s AnotherInterface_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AnotherInterface_Methods(nil, s), s, c)
}

// AnotherInterface_ServerToClient creates a new Client from an implementation of AnotherInterface_Server.
// The caller is responsible for calling Release on the returned Client.
func AnotherInterface_ServerToClient(s AnotherInterface_Server) AnotherInterface {
	return AnotherInterface(capnp.NewClient(AnotherInterface_NewServer(s)))
}

// AnotherInterface_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AnotherInterface_Methods(methods []server.Method, s AnotherInterface_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbe4377923e5ac213,
			MethodID:      0,
			InterfaceName: "testdata/expected_output.capnp:AnotherInterface",
			MethodName:    "complexMethod",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ComplexMethod(ctx, AnotherInterface_complexMethod{call})
		},
	})

	return methods
}

// AnotherInterface_complexMethod holds the state for a server call to AnotherInterface.complexMethod.
// See server.Call for documentation.
type AnotherInterface_complexMethod struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnotherInterface_complexMethod) Args() AnotherInterface_complexMethod_Params {
	return AnotherInterface_complexMethod_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AnotherInterface_complexMethod) AllocResults() (AnotherInterface_complexMethod_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AnotherInterface_complexMethod_Results(r), err
}

// AnotherInterface_List is a list of AnotherInterface.
type AnotherInterface_List = capnp.CapList[AnotherInterface]

// NewAnotherInterface_List creates a new list of AnotherInterface.
func NewAnotherInterface_List(s *capnp.Segment, sz int32) (AnotherInterface_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AnotherInterface](l), err
}

type AnotherInterface_complexMethod_Params capnp.Struct

// AnotherInterface_complexMethod_Params_TypeID is the unique identifier for the type AnotherInterface_complexMethod_Params.
const AnotherInterface_complexMethod_Params_TypeID = 0xe1a2effefacfb5d5

func NewAnotherInterface_complexMethod_Params(s *capnp.Segment) (AnotherInterface_complexMethod_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnotherInterface_complexMethod_Params(st), err
}

func NewRootAnotherInterface_complexMethod_Params(s *capnp.Segment) (AnotherInterface_complexMethod_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnotherInterface_complexMethod_Params(st), err
}

func ReadRootAnotherInterface_complexMethod_Params(msg *capnp.Message) (AnotherInterface_complexMethod_Params, error) {
	root, err := msg.Root()
	return AnotherInterface_complexMethod_Params(root.Struct()), err
}

func (s AnotherInterface_complexMethod_Params) String() string {
	str, _ := text.Marshal(0xe1a2effefacfb5d5, capnp.Struct(s))
	return str
}

func (s AnotherInterface_complexMethod_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AnotherInterface_complexMethod_Params) DecodeFromPtr(p capnp.Ptr) AnotherInterface_complexMethod_Params {
	return AnotherInterface_complexMethod_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AnotherInterface_complexMethod_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AnotherInterface_complexMethod_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AnotherInterface_complexMethod_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AnotherInterface_complexMethod_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AnotherInterface_complexMethod_Params) X() (ImportedStruct, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ImportedStruct(p.Struct()), err
}

func (s AnotherInterface_complexMethod_Params) HasX() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AnotherInterface_complexMethod_Params) SetX(v ImportedStruct) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewX sets the x field to a newly
// allocated ImportedStruct struct, preferring placement in s's segment.
func (s AnotherInterface_complexMethod_Params) NewX() (ImportedStruct, error) {
	ss, err := NewImportedStruct(capnp.Struct(s).Segment())
	if err != nil {
		return ImportedStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// AnotherInterface_complexMethod_Params_List is a list of AnotherInterface_complexMethod_Params.
type AnotherInterface_complexMethod_Params_List = capnp.StructList[AnotherInterface_complexMethod_Params]

// NewAnotherInterface_complexMethod_Params creates a new list of AnotherInterface_complexMethod_Params.
func NewAnotherInterface_complexMethod_Params_List(s *capnp.Segment, sz int32) (AnotherInterface_complexMethod_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AnotherInterface_complexMethod_Params](l), err
}

// AnotherInterface_complexMethod_Params_Future is a wrapper for a AnotherInterface_complexMethod_Params promised by a client call.
type AnotherInterface_complexMethod_Params_Future struct{ *capnp.Future }

func (f AnotherInterface_complexMethod_Params_Future) Struct() (AnotherInterface_complexMethod_Params, error) {
	p, err := f.Future.Ptr()
	return AnotherInterface_complexMethod_Params(p.Struct()), err
}
func (p AnotherInterface_complexMethod_Params_Future) X() ImportedStruct_Future {
	return ImportedStruct_Future{Future: p.Future.Field(0, nil)}
}

type AnotherInterface_complexMethod_Results capnp.Struct

// AnotherInterface_complexMethod_Results_TypeID is the unique identifier for the type AnotherInterface_complexMethod_Results.
const AnotherInterface_complexMethod_Results_TypeID = 0x99c26ce3bed46095

func NewAnotherInterface_complexMethod_Results(s *capnp.Segment) (AnotherInterface_complexMethod_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AnotherInterface_complexMethod_Results(st), err
}

func NewRootAnotherInterface_complexMethod_Results(s *capnp.Segment) (AnotherInterface_complexMethod_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AnotherInterface_complexMethod_Results(st), err
}

func ReadRootAnotherInterface_complexMethod_Results(msg *capnp.Message) (AnotherInterface_complexMethod_Results, error) {
	root, err := msg.Root()
	return AnotherInterface_complexMethod_Results(root.Struct()), err
}

func (s AnotherInterface_complexMethod_Results) String() string {
	str, _ := text.Marshal(0x99c26ce3bed46095, capnp.Struct(s))
	return str
}

func (s AnotherInterface_complexMethod_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AnotherInterface_complexMethod_Results) DecodeFromPtr(p capnp.Ptr) AnotherInterface_complexMethod_Results {
	return AnotherInterface_complexMethod_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AnotherInterface_complexMethod_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AnotherInterface_complexMethod_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AnotherInterface_complexMethod_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AnotherInterface_complexMethod_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AnotherInterface_complexMethod_Results) Result0() (AnotherImportedStruct, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AnotherImportedStruct(p.Struct()), err
}

func (s AnotherInterface_complexMethod_Results) HasResult0() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AnotherInterface_complexMethod_Results) SetResult0(v AnotherImportedStruct) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult0 sets the result0 field to a newly
// allocated AnotherImportedStruct struct, preferring placement in s's segment.
func (s AnotherInterface_complexMethod_Results) NewResult0() (AnotherImportedStruct, error) {
	ss, err := NewAnotherImportedStruct(capnp.Struct(s).Segment())
	if err != nil {
		return AnotherImportedStruct{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AnotherInterface_complexMethod_Results) Result1() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s AnotherInterface_complexMethod_Results) HasResult1() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AnotherInterface_complexMethod_Results) Result1Bytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s AnotherInterface_complexMethod_Results) SetResult1(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// AnotherInterface_complexMethod_Results_List is a list of AnotherInterface_complexMethod_Results.
type AnotherInterface_complexMethod_Results_List = capnp.StructList[AnotherInterface_complexMethod_Results]

// NewAnotherInterface_complexMethod_Results creates a new list of AnotherInterface_complexMethod_Results.
func NewAnotherInterface_complexMethod_Results_List(s *capnp.Segment, sz int32) (AnotherInterface_complexMethod_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[AnotherInterface_complexMethod_Results](l), err
}

// AnotherInterface_complexMethod_Results_Future is a wrapper for a AnotherInterface_complexMethod_Results promised by a client call.
type AnotherInterface_complexMethod_Results_Future struct{ *capnp.Future }

func (f AnotherInterface_complexMethod_Results_Future) Struct() (AnotherInterface_complexMethod_Results, error) {
	p, err := f.Future.Ptr()
	return AnotherInterface_complexMethod_Results(p.Struct()), err
}
func (p AnotherInterface_complexMethod_Results_Future) Result0() AnotherImportedStruct_Future {
	return AnotherImportedStruct_Future{Future: p.Future.Field(0, nil)}
}

const schema_85d3acc39d94e0f8 = "x\xda\x9cV[l\x14\xf5\x17>g.;\xbb\xa5\xd0" +
	"\x0eC\xfe\xf9KB6\xe2>pQ\xdc-\x12mc" +
	"\xdc\xa5(\xda\xc4\x9a\x9d\x16\xa26\xa2\xcc\xee\xfc\x1a\xb6" +
	"\xee\x8d\xd9Y\xbb\xd4\x18R\x8c\x9a\x90\x80\x01\xa9IK" +
	"\x90H\xbc\xe0\x85\x18\xa8\x86\x84\x07\"\xe5M\x936\x15" +
	"\x8d/J@bb\x8c\x14\xf4Ak\x13\x1d\xf3\x9b\xd9" +
	"\xb9\xd0\xdd\xedn\xfb\xb2\xd9\xd9\xf9\xe6w\xbe\xef;\xdf" +
	"9\xb3\xe1\x83l\x8c\x8b,?\xe9\x07FVy\x9fq" +
	"\xf6\xea\xe4\xd3\xbf\x84g\x0e\x82\xb8\x11\x01x\x14\x006" +
	"o\xe1\x18\x06P\xea\xe2\xa2\x80\x86|\xeeL\xa9\xf3\xf6" +
	"\x99\xc3 \x06Yc\xf6\xda\xb1\x13\x97?\xbd\xf2\x1a\x00" +
	"nNq}(\xbd\xc2\xd1\x07\xf6qo\xa0T\xe4\x05" +
	"\x00\xe3\x9e\xd21\xeer\xfb\xf3o\x82\x1cDt\xf1\xd6" +
	"\xc1\xbb\xf8\x8f\xcb8i/?\x08h\xbcu\xf5\xc2\xdc" +
	";\xbf-;\x0ab\xd0\x0bf)x\x9a\x1f@\xe9g" +
	"\x13|\x9d\xff\x0c\xd0\x18{\xf5\xcf\xde\x9b\xb3\xda\xd1\xaa" +
	"G\x0f\xfb\x12(\x8d\xf8(\xfa\x88\x8f\x1e=\xd9\xf7\xfa" +
	"\x87S\xeb\x8e\x1f\xf3\x0a\xbb\xe9\xbb\x80\x80\xd2?>*" +
	"\xec\x87\xf1\x17\xffRw\x8f\x8d\x80\xbc\x11\x1d\xc4\x1aa" +
	"5\x95\xbeE\xa0G\x8c\xec\xfe\xf6\xe2\x8d\xf4\xc4(\x88" +
	"a\x0a`(\xe0\x88\xd0F\x01\x1f\x99\x80\xd3m_\xe7" +
	"Gw\xfb\x8e{k\xf0\xfe?h\x8d\xbb\xfc\xb4\xc6\xc8" +
	"\x8eh\xbc\xe9\xfc\xc0\x07^@\xbb\xdf$\xd1e\x02\x06" +
	"?\xf9\xf1\xf0{?}\xf3\xb9\x050\xcdL\xf9\xe7\x10" +
	"8C\x9a\xe8{\xe4\xe8\xe0\xb6\x8b\x15\xbe\xef\xf2\x1f@" +
	"i\xaf\x9f*\xcd\xf8\x1f\x97F\xe9\xb7[\xd1\xa9dh" +
	"\x0d\x99\xf0\x94\x19\xb6\xca\x1c1\xcb\xcc<\x11\x19<~" +
	"\xed\xf4We\xadf\x9dK\xfes\x140m\x026\xeb" +
	"\xfb3|\xfc\xe4\xa4\x97\xe8\xef\x16\x00\x03\x14\xc0I\xff" +
	"\xdbuxz\xfaJU\xf3\xef\x0eh(m\x09PJ" +
	"\x91\x005F\x0f\x8cM\xbc\xfc\xe0\x97\xdfWE\x1f\x0a" +
	"$Pz\xd7D\x9f0\xd1\xdf}15\xf7\xef\xadS" +
	"\xd7\xcb>\x9b\xa0\xbf\x03\x1b\xa8\xcfb\x13-~\xe3\xd4" +
	"%\xe3\xd4\xdb\xcd3\x1e\x97\"M+\x19\xe0\x8cg\xc7" +
	"\x1f>_\x1a\xbb=\xeb\xe5\xbd\xbe\xc9\xe4\xddn>:" +
	">\x94Hm\x18^mx\x0dn\xfa\x15!l\xe8\xa4" +
	"\xa0\xab\x8a\xae\x08\xf7\x93R\x9e$u\xa2\xbe\x90+\xea" +
	"\xf9\xa2\xbe)\xa9\xe4\xb3\xf9\x8e\xee}]Y\x9dh\xfd" +
	"J\x92l\xca\x92\x82N\xd4\x1e\xa2\x17\xb5l\xa8\x87\x14" +
	"\x8ai\xbd\x002\xc7r\x00\x1c\x02\x88\xcb;\x01d?" +
	"\x8b\xf2*\x06\xf7k\xe6\xfd0\xb6\xba6\x00b+\xb5" +
	"\xa5\\\x92\xabW\x92M\x928\xa2\xfc\x7f\x96\x07p\x9a" +
	"\x87v\xa4\xc5\xb3k\x81\x11\xdf\x17\xd0\xed\x1b\xdaI\x13" +
	"G\xe9\xbdC\x022\x8e7H\xc3\x014\x1d\xc3\xf4^" +
	"Q@\xd6q\x14\xed)\x10S\x07\x80\x11\x15\x019'" +
	"\x93h\xef\x06q\xe7\x000b\xb7\x80\xbcc'\xda\xd1" +
	"\x17\xb7\xf6\x01#\xb6\x0bB\x7f.\x17C!\xa1h\xe6" +
	"\xe7P\x0c\x8dL1\xad\xa7\xf2i\x82\x96o\x05\x88\xa1" +
	"a\x1b\x09-\xf4\xa7\x18\x1a\xa9L>\xa7\xe9;\x08\xb0" +
	"\x05=\x86qtM\xe2k\x98\xb45\x9b\xd3\xf7\x10\xad" +
	"\xcb|\x90\xa8\xbdz\x8bVL\xea\xd4.\xbf\xd3\x8f\xf5" +
	"\x09\x00y\x1d\x8b\xf2\x03\x0c\"\xae\xa2\x99\x17#m\x00" +
	"\xf2\xbd,\xca\x0f16\x8f\xed)\x10HZ\xc5V7" +
	"\xdeV\xa7\x82/)\xe9\"\xc1e\xc0\xe0\xb2\x06\xfa\xb6" +
	"-\x97\xc9\xa7I\xc9C\xa5\xd9\xa1\xf2\xd8\x10\x80\xfc(" +
	"\x8br\x9cA\xd1\xe6\xd2=\x00 ?\xc9\xa2\xfc\x0c\x83" +
	"\"\xc3\xacB\x06@\xdc\xd9\x01 \xc7Y\x94\x9fc\xd0" +
	" \x99\x04QU\xa2B\xd4\x12Z\xc9\xd1P,#\xb6" +
	"CK\x8a\x8ah\x06\x06\x9b\x01\xa3\x964luWq" +
	"\x83\xe9\xebMQ\x15\xbd\xba&T\xfa\xb9\x1a@\x0e\xb1" +
	"(\x87]?\xef\xdb\xe0z\xcc\xa6T\xe4\x80A\x0e\xb0" +
	"%\xabd\x88M\xa6n3\xbdC\xd6\x9f\xcb\x85z\xa2" +
	"\xd6p\xd5\x9f-\xe7m0O]#\xe3l'\xb3\x1c" +
	"Lk\xa2Y\xbd\xe0U\xdcYEq\xa7\xab\xd8aR" +
	"\x96]\xbe\x8eT(\x17\xea\xc4\xd8!\x95\xb4B\xd4M" +
	"\xf4=95\xd4C\x82\x96\x11\xd5)\x89\x0br\xaa\xe8" +
	"}Mv\xbe\x06\xdc\xb2G\xb4\xa0\xbb\xac\xea\xb6g~" +
	"X\x17\x13\x84\x84\xa25\x1c\x84\xa5\x08\xbac\x9bG\xe3" +
	"\x8a\xa6d\x0a\x0d\xaf\x1d\xfb\x14\xa0\x13\xc2\x99\x0b\xda~" +
	"\x7f\xa1\xfd\x87A\x145`\xc4\x80`\xd8=\x85\xa0\xd9" +
	"\xd5\xc6\x16\xdc\x9dV\x0c-hE\xc8c\xc5\x0a\xc08" +
	"\x8b\xa6#+\x960z\xf1\xa0i\x84\xb7\xcaJ\xd7p" +
	",\xd9I_t+\xeb\x1c\xbc\xaf\xa2\x87\xb5\x16\x94\xb3" +
	"\xf2\x83z\x95\x95\xdfQe`;\xdc\xe1\x88\xf6\xd3-" +
	"\xe9L\x80u\xd9V!\xaaV\xed\xa7\xcc\xccT_\x8e" +
	"\xd5*\xb7y*\x17\xcc\xc5Z\xb9\xb3j\xbce\x96\xb8" +
	"1\xe2J\xcb\xc2\xfd\xab=\x94K\xd9\x99\xe6\xd8`a" +
	"\xd1i\xae\x92\x86\xb5n\x98\x05E\xd3\xec s\xf3\x82" +
	"\xbc\xc8]U\xf6\xe3\xbf\x00\x00\x00\xff\xff\xc7\x12\xca\xe3"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_85d3acc39d94e0f8,
		Nodes: []uint64{
			0x8aee30e857cedeb1,
			0x8eadf04278adb251,
			0x8f5e39c304947823,
			0x920bec9efabade93,
			0x9272f8ed53f6839a,
			0x949b28cfa7865ace,
			0x959a6064f76bb3dc,
			0x99c26ce3bed46095,
			0x9b06609970cb32a8,
			0xa66ab70a503f5495,
			0xb4d2e2a48eddab77,
			0xbe4377923e5ac213,
			0xc2651d002463cf3f,
			0xcaa8e09b773148ee,
			0xce9f50056d7f7433,
			0xd3d1d18e5d161304,
			0xd7c0377bc29a0974,
			0xe1a2effefacfb5d5,
			0xee0c96a2ffc1a2e3,
			0xf8f09a78b73cb359,
			0xff1a812a69627ab3,
		},
		Compressed: true,
	})
}
